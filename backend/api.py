from fastapi import FastAPI
from fastapi import HTTPException
from pydantic import (BaseModel)
from rsa_guard.rsa import *
from backend.utils import *
from fastapi.middleware.cors import CORSMiddleware
import os

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å–æ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class PasswordRequest(BaseModel):  # –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    service_name: str
    password: str
    secret_word: str


class EncryptRequest(BaseModel):  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    password: str
    service_name: str
    secret_word: str


class DecryptRequest(BaseModel):
    service_name: str
    secret_word: str


class DeleteRequest(BaseModel):
    service_name: str


@app.post("/passwords/encrypt")
def encrypt_entered_password(req: EncryptRequest) -> dict[str, list[str]]:
    """
        üîê –®–∏—Ñ—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫ —Å–∞–π—Ç—É, –Ω–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
        - –ü–∞—Ä–æ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.
        """

    enc_priv_key, public_key = generate_keys(req.secret_word)
    enc_password = encrypt_password(req.password, public_key)
    service_name = req.service_name

    filename = "/Users/irinaazarova/Documents/–∫—É—Ä—Å–æ–≤–∞—è/rsa-guard/backend/password.json"
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            full_data = json.load(f)
        if service_name in full_data:
            raise HTTPException(status_code=400, detail=f"–°–µ—Ä–≤–∏—Å '{service_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        full_data = {}

    data = get_data(service_name, enc_priv_key, enc_password)
    full_data = save_data(data, "/Users/irinaazarova/Documents/–∫—É—Ä—Å–æ–≤–∞—è/rsa-guard/backend/password.json")

    return full_data


@app.post("/passwords/decrypt")
def decrypt_entered_password(req: DecryptRequest) -> dict[str, str]:
    """
    üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    - –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞.
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ, –∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å.
    """
    filename = "/Users/irinaazarova/Documents/–∫—É—Ä—Å–æ–≤–∞—è/rsa-guard/backend/password.json"

    with open(filename, "r", encoding="utf-8") as f:
        full_data = json.load(f)

    if req.service_name not in full_data:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    service_data = full_data[req.service_name]
    enc_priv_key = service_data[0]
    enc_password = service_data[1]

    try:
        password = decrypt_password(enc_password, enc_priv_key, req.secret_word)
    except Exception:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")

    return {"decrypted_password": password}


@app.delete("/passwords/delete")
def delete_password(req: DeleteRequest):
    filename = "/Users/irinaazarova/Documents/–∫—É—Ä—Å–æ–≤–∞—è/rsa-guard/backend/password.json"
    with open(filename, "r", encoding="utf-8") as f:
        full_data = json.load(f)

    if req.service_name not in full_data:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    del full_data[req.service_name]

    with open(filename, "w", encoding="utf-8") as f:
        json.dump(full_data, f, ensure_ascii=False, indent=4)

    return {"status": "ok"}


